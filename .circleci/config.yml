version: 2.1
commands:
  setup_environment:
    description: "Setup testing environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: set -e
      - setup_remote_docker
      - run:
          name: Prepare environment and install dependencies
          command: |
            export SCCACHE_CACHE_SIZE=200M
            export WORK_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            export SCCACHE_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            mkdir -p "$CIRCLE_WORKING_DIRECTORY/.bin"
            wget https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            tar -C "$CIRCLE_WORKING_DIRECTORY/.bin" -xvf sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            mv $CIRCLE_WORKING_DIRECTORY/.bin/sccache-v0.3.0-x86_64-unknown-linux-musl/sccache $CIRCLE_WORKING_DIRECTORY/.bin/sccache
            export PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.bin"
            export RUSTC_WRAPPER="sccache"
            rm -rf "$CIRCLE_WORKING_DIRECTORY/.cargo/registry"
            DEBIAN_FRONTEND=noninteractive sudo apt-get update
            DEBIAN_FRONTEND=noninteractive sudo apt-get dist-upgrade -y -o DPkg::Options::=--force-confold
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends clang llvm-dev llvm pkg-config xz-utils make libssl-dev libclang-dev cmake zlib1g-dev
      - restore_cache:
          keys:
            - << parameters.cache_key >>

  clear_environment:
    description: "Clear environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: (sccache -s||true)
      - run: set +e
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - .cache/sccache
            - .cargo
  run_parallel:
    description: "Build and run tests (in parallel)"
    parameters:
      workspace_member:
        type: string
      features:
        type: string
    steps:
      - run:
          no_output_timeout: 30m
          command: |
            cd << parameters.workspace_member >>
            cargo test --features=<< parameters.features >> -- --list --format terse | sed 's/: test//' > test_names.txt
            TEST_NAMES=$(circleci tests split test_names.txt)
            for i in $(echo $TEST_NAMES | sed "s/ / /g")
            do
                RUST_MIN_STACK=8388608 cargo test --features=<< parameters.features >> $i
            done
  install_rust_nightly:
    description: "Install Rust nightly toolchain"
    steps:
      - run: rustup toolchain install nightly-x86_64-unknown-linux-gnu
jobs:
  environment:
    docker:
      - image: cimg/rust:1.81.0 
    resource_class: xlarge
    parallelism: 1
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-environment-cache
      - run_parallel:
          workspace_member: environment
          features: ""
      - clear_environment:
          cache_key: snarkos-environment-cache

  snarkos:
    docker:
      - image: cimg/rust:1.81.0 
    resource_class: xlarge
    parallelism: 20
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-stable-cache
      - run_parallel:
          workspace_member: .
          features: ""
      - clear_environment:
          cache_key: snarkos-stable-cache

  # codecov:
  #   machine:
  #     image: ubuntu-2404:current
  #     docker_layer_caching: true
  #   resource_class: xlarge
  #   steps:
  #     - attach_workspace:
  #         at: 
  #     - run:
  #         name: Run kcov
  #         command: >
  #           cd ~/project/project/ &&
  #           docker run --security-opt seccomp=unconfined -v ~/project/project/:
  #           howardwu/snarkos-codecov:2021-03-25 bash ci/kcov.sh
  #     - run: cd ./project/ && bash <(curl -s https://codecov.io/bash)

  fmt:
    docker:
      - image: cimg/rust:1.81.0 
    resource_class: xlarge
    steps:
      - checkout
      - install_rust_nightly
      - setup_environment:
          cache_key: snarkos-fmt-cache
      - run:
          name: Check style
          no_output_timeout: 35m
          command: cargo +nightly fmt --all -- --check
      - clear_environment:
          cache_key: snarkos-fmt-cache

  clippy:
    docker:
      - image: cimg/rust:1.81.0 
    resource_class: xlarge
    steps:
      - checkout
      - install_rust_nightly
      - setup_environment:
          cache_key: snarkos-clippy-cache
      - run:
          name: Check style
          no_output_timeout: 35m
          command: cargo +nightly clippy --workspace --all-targets
      - clear_environment:
          cache_key: snarkos-clippy-cache

  build-and-publish-docker-arm:
    machine:
      image: ubuntu-2404:current
      docker_layer_caching: true
    resource_class: arm.xlarge
    steps:
      - checkout
      - run:
          name: "Ensure workspace directory exists"
          command: mkdir -p my_workspace
      - run:
          name: "Check out the branch and commit for the tag"
          command: |
            git fetch --all --tags
            TAG_NAME="<< pipeline.git.tag >>"
            COMMIT_HASH=$(git rev-list -n 1 $TAG_NAME)
            git checkout $COMMIT_HASH
      - run:
          name: "Build snarkOS Docker image arm64"
          command: |
            TAG="<< pipeline.git.tag >>"
            if [ "$TAG" == "mainnet" ]; then
              docker build -f Dockerfile -t $DOCKER_REPO:mainnet-arm-test .
              docker build -f Dockerfile -t $DOCKER_REPO:latest-arm-test .
            else
              docker build -f Dockerfile -t $DOCKER_REPO:$TAG-arm-test .
            fi
      - run:
          name: "Push snarkOS Docker image arm64"
          command: |
            TAG="<< pipeline.git.tag >>"
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            if [ "$TAG" == "mainnet" ]; then
              docker push $DOCKER_REPO:mainnet-arm-test
              docker push $DOCKER_REPO:latest-arm-test
            else
              docker push $DOCKER_REPO:$TAG-arm-test
            fi
      - run:
          name: "Save ARM tag to workspace"
          command: |
            TAG="<< pipeline.git.tag >>"
            if [ "$TAG" == "mainnet" ]; then
              echo "mainnet-arm-test" > my_workspace/docker_tag_arm
            else
              echo "$TAG-arm-test" > my_workspace/docker_tag_arm
            fi
      - persist_to_workspace:
          root: my_workspace
          paths:
            - docker_tag_arm

  build-and-publish-docker-amd:
    machine:
      image: ubuntu-2404:current
      docker_layer_caching: true
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: "Ensure workspace directory exists"
          command: mkdir -p my_workspace
      - run:
          name: "Check out the branch and commit for the tag"
          command: |
            git fetch --all --tags
            TAG_NAME="<< pipeline.git.tag >>"
            COMMIT_HASH=$(git rev-list -n 1 $TAG_NAME)
            git checkout $COMMIT_HASH
      - run:
          name: "Build snarkOS Docker image amd64"
          command: |
            TAG="<< pipeline.git.tag >>"
            if [ "$TAG" == "mainnet" ]; then
              docker build -f Dockerfile -t $DOCKER_REPO:mainnet-amd-test .
              docker build -f Dockerfile -t $DOCKER_REPO:latest-amd-test .
            else
              docker build -f Dockerfile -t $DOCKER_REPO:$TAG-amd-test .
            fi
      - run:
          name: "Push snarkOS Docker image amd64"
          command: |
            TAG="<< pipeline.git.tag >>"
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            if [ "$TAG" == "mainnet" ]; then
              docker push $DOCKER_REPO:mainnet-amd-test
              docker push $DOCKER_REPO:latest-amd-test
            else
              docker push $DOCKER_REPO:$TAG-amd-test
            fi
      - run:
          name: "Save AMD tag to workspace"
          command: |
            TAG="<< pipeline.git.tag >>"
            if [ "$TAG" == "mainnet" ]; then
              echo "mainnet-amd-test" > my_workspace/docker_tag_amd
            else
              echo "$TAG-amd-test" > my_workspace/docker_tag_amd
            fi
      - persist_to_workspace:
          root: my_workspace
          paths:
            - docker_tag_amd

  publish_snarkos_manifest:
    machine:
      image: ubuntu-2404:current
      docker_layer_caching: true
    resource_class: arm.xlarge
    steps:
      - checkout
      - attach_workspace:
          at: my_workspace
      - run:
          name: "Create and push Docker multi-arch manifests"
          command: |
            TAG="<< pipeline.git.tag >>"
            ARM_TAG=$(cat my_workspace/docker_tag_arm)
            AMD_TAG=$(cat my_workspace/docker_tag_amd)
            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USERNAME --password-stdin
            if [ "$TAG" == "canary-test" ]; then
              docker manifest create $DOCKER_REPO:mainnet-test --amend $DOCKER_REPO:$ARM_TAG --amend $DOCKER_REPO:$AMD_TAG
              docker manifest push $DOCKER_REPO:mainnet-test
              docker manifest create $DOCKER_REPO:latest-test --amend $DOCKER_REPO:$ARM_TAG --amend $DOCKER_REPO:$AMD_TAG
              docker manifest push $DOCKER_REPO:latest-test
            else
              docker manifest create $DOCKER_REPO:$TAG-test --amend $DOCKER_REPO:$ARM_TAG --amend $DOCKER_REPO:$AMD_TAG
              docker manifest push $DOCKER_REPO:$TAG-test
            fi

workflows:
  build-snarkos-docker-images:
    jobs:
      - build-and-publish-docker-arm:
          filters:
            tags:
              only: /^canary-test|canary|testnet|mainnet$/
      - build-and-publish-docker-amd:
          filters:
            tags:
              only: /^canary-test|canary|testnet|mainnet$/
      - publish_snarkos_manifest:
          requires:
            - build-and-publish-docker-arm
            - build-and-publish-docker-amd
          filters:
            tags:
              only: /^canary-test|canary|testnet|mainnet$/
